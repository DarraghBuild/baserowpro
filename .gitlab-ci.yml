# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

# container_scanning:
#   variables:
#     DOCKER_IMAGE: ...
#     DOCKER_USER: ...
#     DOCKER_PASSWORD: ...
include:
- "/.gitlab/ci_includes/jobs.yml"
- template: Jobs/Container-Scanning.gitlab-ci.yml
stages:
- build
- test
- build-final
- publish
variables:
  TRIGGER_FULL_IMAGE_REBUILD:
    value: 'no'
    description: If set to yes then all images will re-pull their base images and
      rebuild entirely from scratch with no caching.
  ENABLE_JOB_SKIPPING:
    value: 'false'
    description: If set to true then tests and lints will skipped when safe to do
      so.
  ENABLE_COVERAGE:
    value: 'true'
    description: If set to false then tests will not generate coverage or testing
      reports used by gitlab to show nicer MRs.
  ENABLE_RELEASES:
    value: 'false'
    description: If true then on master and develop release images will be pushed
      automatically
  BUILD_ALL_IN_ONE:
    value: 'false'
    description: If true then regardless of what branch we are on the all in one image
      will be built.
  CI_IMAGE_REPO: "$CI_REGISTRY_IMAGE/ci"
  CLEANUP_JOB_CI_TAG_PREFIX: ci-latest-
  TESTED_IMAGE_PREFIX: ci-tested-
  BACKEND_IMAGE_NAME: backend
  BACKEND_DEV_IMAGE_NAME: backend_dev
  WEBFRONTEND_IMAGE_NAME: web-frontend
  ALLINONE_IMAGE_NAME: baserow
  CLOUDRON_IMAGE_NAME: cloudron
  HEROKU_IMAGE_NAME: heroku
  WEBFRONTEND_DEV_IMAGE_NAME: web-frontend_dev
  BACKEND_CI_DEV_IMAGE: "$CI_IMAGE_REPO/$BACKEND_DEV_IMAGE_NAME:$CLEANUP_JOB_CI_TAG_PREFIX$CI_COMMIT_SHORT_SHA"
  WEBFRONTEND_CI_DEV_IMAGE: "$CI_IMAGE_REPO/$WEBFRONTEND_DEV_IMAGE_NAME:$CLEANUP_JOB_CI_TAG_PREFIX$CI_COMMIT_SHORT_SHA"
  TESTED_BACKEND_CI_IMAGE: "$CI_IMAGE_REPO/$BACKEND_IMAGE_NAME:$TESTED_IMAGE_PREFIX$CI_COMMIT_SHORT_SHA"
  TESTED_WEBFRONTEND_CI_IMAGE: "$CI_IMAGE_REPO/$WEBFRONTEND_IMAGE_NAME:$TESTED_IMAGE_PREFIX$CI_COMMIT_SHORT_SHA"
  TESTED_BACKEND_CI_DEV_IMAGE: "$CI_IMAGE_REPO/$BACKEND_DEV_IMAGE_NAME:$TESTED_IMAGE_PREFIX$CI_COMMIT_SHORT_SHA"
  TESTED_WEBFRONTEND_CI_DEV_IMAGE: "$CI_IMAGE_REPO/$WEBFRONTEND_DEV_IMAGE_NAME:$TESTED_IMAGE_PREFIX$CI_COMMIT_SHORT_SHA"
  TESTED_ALLINONE_CI_IMAGE: "$CI_IMAGE_REPO/$ALLINONE_IMAGE_NAME:$TESTED_IMAGE_PREFIX$CI_COMMIT_SHORT_SHA"
  TESTED_CLOUDRON_CI_IMAGE: "$CI_IMAGE_REPO/$CLOUDRON_IMAGE_NAME:$TESTED_IMAGE_PREFIX$CI_COMMIT_SHORT_SHA"
  TESTED_HEROKU_CI_IMAGE: "$CI_IMAGE_REPO/$HEROKU_IMAGE_NAME:$TESTED_IMAGE_PREFIX$CI_COMMIT_SHORT_SHA"
  DEVELOP_LATEST_TAG: develop-latest
  MASTER_BRANCH_NAME: master
  DEVELOP_BRANCH_NAME: develop
  BACKEND_DOCKERFILE_PATH: "$CI_PROJECT_DIR/backend/Dockerfile"
  WEBFRONTEND_DOCKERFILE_PATH: "$CI_PROJECT_DIR/web-frontend/Dockerfile"
  ALLINONE_DOCKERFILE_PATH: "$CI_PROJECT_DIR/deploy/all-in-one/Dockerfile"
  CLOUDRON_DOCKERFILE_PATH: "$CI_PROJECT_DIR/deploy/cloudron/Dockerfile"
  HEROKU_DOCKERFILE_PATH: "$CI_PROJECT_DIR/heroku.Dockerfile"
  PROJECT_PATH_FOR_CI_UTIL_IMAGE: baserow/baserow
  PROJECT_PATH_FOR_E2E_TEST_IMAGE: baserow/baserow
  PROJECT_PATH_FOR_CI_DIND_IMAGE: baserow/baserow
  CI_UTIL_IMAGE: "$CI_REGISTRY/$PROJECT_PATH_FOR_CI_UTIL_IMAGE/ci/ci_util_image:latest"
  E2E_TEST_IMAGE: "$CI_REGISTRY/$PROJECT_PATH_FOR_E2E_TEST_IMAGE/ci/baserow_e2e-tests:latest"
  CI_DIND_IMAGE: "$CI_REGISTRY/$PROJECT_PATH_FOR_E2E_TEST_IMAGE/ci/ci_dind_image:latest"
build-ci-util-image:
  image: docker:20.10.18
  stage: build
  services:
  - name: "$CI_DIND_IMAGE"
    alias: docker
  variables:
    DOCKER_BUILDKIT: 1
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
  - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
    $CI_REGISTRY
  - cd .gitlab/ci_util_image
  - docker build -t $CI_UTIL_IMAGE .
  - docker push $CI_UTIL_IMAGE
  when: manual
  only:
    changes:
    - ".gitlab/ci_util_image/*"
    - ".gitlab-ci.yml"
  except:
    refs:
    - pipelines
    - tags
build-e2e-tests-image:
  image: docker:20.10.18
  stage: build
  services:
  - name: "$CI_DIND_IMAGE"
    alias: docker
  variables:
    DOCKER_BUILDKIT: 1
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
  - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
    $CI_REGISTRY
  - cd e2e-tests
  - docker build -t $E2E_TEST_IMAGE .
  - docker push $E2E_TEST_IMAGE
  when: manual
  only:
    changes:
    - e2e-tests/
    - ".gitlab/ci_util_image/*"
    - ".gitlab-ci.yml"
  except:
    refs:
    - pipelines
    - tags
build-ci-dind-image:
  image: docker:20.10.18
  stage: build
  services:
  - docker:20.10.18-dind
  variables:
    DOCKER_BUILDKIT: 1
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
  - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
    $CI_REGISTRY
  - cd .gitlab/ci_dind_image
  - docker build -t $CI_DIND_IMAGE .
  - docker push $CI_DIND_IMAGE
  when: manual
  only:
    changes:
    - ".gitlab/ci_dind_image/*"
    - ".gitlab-ci.yml"
  except:
    refs:
    - pipelines
    - tags
build-backend-image:
  extends: ".build-baserow-image"
  variables:
    DEV_IMAGE_NAME: "$BACKEND_DEV_IMAGE_NAME"
    DOCKERFILE_PATH: "$BACKEND_DOCKERFILE_PATH"
backend-lint:
  extends:
  - ".docker-image-test-stage"
  - ".skippable-job"
  variables:
    RUN_WHEN_CHANGES_MADE_IN: backend/ premium/backend/ enterprise/backend/
  script:
  - docker run --rm $BACKEND_CI_DEV_IMAGE lint
  needs:
  - job: build-backend-image
backend-test-group-1:
  extends:
  - ".docker-image-test-stage"
  - ".skippable-job"
  services:
  - name: "$CI_DIND_IMAGE"
    alias: docker
  - name: postgres:11
    alias: db
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    POSTGRES_USER: baserow
    POSTGRES_PASSWORD: baserow
    POSTGRES_DB: baserow
    PYTEST_SPLIT_GROUP: 1
    RUN_WHEN_CHANGES_MADE_IN: backend/ premium/backend/ enterprise/backend/ .gitlab-ci.yml
    DOWNLOAD_AND_UNPACK_ARTIFACTS_ON_SKIP: 'true'
    FF_NETWORK_PER_BUILD: 1
  script:
  - mkdir -p reports
  - TEST_TYPE=$([[ "$ENABLE_COVERAGE" = "true" ]] && echo "ci-test" || echo "test")
  - PYTEST_EXTRA_ARGS=$([[ "$RUN_MORNING_TESTS" = "true" ]] && echo '--run-once-per-day-in-ci'
    || echo "")
  - |
    docker run \
      -e PYTEST_SPLITS=4 \
      -e PYTEST_SPLIT_GROUP=$PYTEST_SPLIT_GROUP \
      --name=baserow_backend_test_container \
      --network=host \
      $BACKEND_CI_DEV_IMAGE $TEST_TYPE $PYTEST_EXTRA_ARGS;
  - docker cp baserow_backend_test_container:/baserow/backend/reports .
  - docker rm baserow_backend_test_container
  needs:
  - job: build-backend-image
  artifacts:
    name: "$CI_JOB_NAME-reports"
    paths:
    - reports/
    reports:
      junit: reports/report.xml
backend-test-group-2:
  extends: backend-test-group-1
  variables:
    PYTEST_SPLIT_GROUP: 2
backend-test-group-3:
  extends: backend-test-group-1
  variables:
    PYTEST_SPLIT_GROUP: 3
backend-test-group-4:
  extends: backend-test-group-1
  variables:
    PYTEST_SPLIT_GROUP: 4
collect-backend-coverage:
  image: "$CI_UTIL_IMAGE"
  stage: build-final
  interruptible: true
  only:
    variables:
    - $ENABLE_COVERAGE == "true"
  except:
    refs:
    - tags
  needs:
  - job: backend-test-group-1
    artifacts: true
  - job: backend-test-group-2
    artifacts: true
  - job: backend-test-group-3
    artifacts: true
  - job: backend-test-group-4
    artifacts: true
  script:
  - ". /baserow/venv/bin/activate"
  - cp reports/.coverage.* .
  - export COVERAGE_RCFILE=backend/.coveragerc
  - coverage combine
  - coverage report
  - coverage xml -o coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: "/^TOTAL.+?(\\d+\\%)$/"
build-final-backend-image:
  extends: ".build-final-baserow-image"
  needs:
  - job: backend-test-group-1
  - job: backend-test-group-2
  - job: backend-test-group-3
  - job: backend-test-group-4
  - job: backend-lint
  variables:
    IMAGE_NAME: "$BACKEND_IMAGE_NAME"
    DEV_IMAGE_NAME: "$BACKEND_DEV_IMAGE_NAME"
    DOCKERFILE_PATH: "$BACKEND_DOCKERFILE_PATH"
build-web-frontend-image:
  extends: ".build-baserow-image"
  variables:
    DEV_IMAGE_NAME: "$WEBFRONTEND_DEV_IMAGE_NAME"
    DOCKERFILE_PATH: "$WEBFRONTEND_DOCKERFILE_PATH"
web-frontend-lint:
  extends:
  - ".docker-image-test-stage"
  - ".skippable-job"
  needs:
  - job: build-web-frontend-image
  variables:
    RUN_WHEN_CHANGES_MADE_IN: web-frontend/ premium/web-frontend/ enterprise/web-frontend/
  script:
  - docker run --rm $WEBFRONTEND_CI_DEV_IMAGE lint
web-frontend-test:
  extends:
  - ".docker-image-test-stage"
  - ".skippable-job"
  variables:
    RUN_WHEN_CHANGES_MADE_IN: web-frontend/ premium/web-frontend/ enterprise/web-frontend/
    DOWNLOAD_AND_UNPACK_ARTIFACTS_ON_SKIP: 'true'
  needs:
  - job: build-web-frontend-image
  script:
  - mkdir reports/ -p
  - TEST_TYPE=$([[ "$ENABLE_COVERAGE" = "true" ]] && echo "ci-test" || echo "test")
  - |
    docker run --name=webfrontend_test $WEBFRONTEND_CI_DEV_IMAGE $TEST_TYPE \
      | tee reports/stdout.txt;
  - docker cp webfrontend_test:/baserow/reports .
  - docker rm webfrontend_test
  artifacts:
    paths:
    - reports/
    reports:
      junit: reports/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: "/Lines\\s*:\\s*(\\d+.?\\d*)%/"
zapier-integration-test:
  extends:
  - ".docker-image-test-stage"
  - ".skippable-job"
  variables:
    RUN_WHEN_CHANGES_MADE_IN: integrations/zapier
  script:
  - cd integrations/zapier
  - yarn install
  - yarn run zapier test
build-final-web-frontend-image:
  extends: ".build-final-baserow-image"
  needs:
  - job: web-frontend-test
  - job: web-frontend-lint
  variables:
    IMAGE_NAME: "$WEBFRONTEND_IMAGE_NAME"
    DEV_IMAGE_NAME: "$WEBFRONTEND_DEV_IMAGE_NAME"
    DOCKERFILE_PATH: "$WEBFRONTEND_DOCKERFILE_PATH"
e2e-tests:
  extends:
  - ".docker-image-test-stage"
  needs:
  - job: build-backend-image
  - job: build-web-frontend-image
  when: manual
  script:
  - cd e2e-tests
  - E2E_TEST_YARN_RUN_CMD=test-all-browsers docker compose up --no-build --exit-code-from
    e2e-tests
build-all-in-one-image:
  extends: ".build-final-baserow-image"
  needs:
  - job: build-final-web-frontend-image
  - job: build-final-backend-image
  only:
    variables:
    - "$CI_COMMIT_BRANCH == $MASTER_BRANCH_NAME"
    - "$CI_COMMIT_BRANCH == $DEVELOP_BRANCH_NAME"
    - $BUILD_ALL_IN_ONE == "true"
    - "$CI_COMMIT_MESSAGE =~ /\\[build-all]/"
  variables:
    IMAGE_NAME: "$ALLINONE_IMAGE_NAME"
    DOCKERFILE_PATH: "$ALLINONE_DOCKERFILE_PATH"
    BUILD_FROM_BACKEND_IMAGE: "$TESTED_BACKEND_CI_IMAGE"
    BUILD_FROM_WEBFRONTEND_IMAGE: "$TESTED_WEBFRONTEND_CI_IMAGE"
build-cloudron-image:
  extends: ".build-final-baserow-image"
  needs:
  - job: build-all-in-one-image
  only:
    variables:
    - $CI_COMMIT_BRANCH == $MASTER_BRANCH_NAME && $CLOUDRON_IMAGE_NAME != "disable"
    - $CI_COMMIT_BRANCH == $DEVELOP_BRANCH_NAME && $CLOUDRON_IMAGE_NAME != "disable"
    - ($BUILD_ALL_IN_ONE == "true" || $CI_COMMIT_MESSAGE =~ /\[build-all]/ ) && $CLOUDRON_IMAGE_NAME
      != "disable"
  variables:
    IMAGE_NAME: "$CLOUDRON_IMAGE_NAME"
    DOCKERFILE_PATH: "$CLOUDRON_DOCKERFILE_PATH"
    BUILD_FROM_IMAGE: "$TESTED_ALLINONE_CI_IMAGE"
build-heroku-image:
  extends: ".build-final-baserow-image"
  needs:
  - job: build-all-in-one-image
  only:
    variables:
    - ( $CI_COMMIT_BRANCH == $MASTER_BRANCH_NAME || $CI_COMMIT_BRANCH == $DEVELOP_BRANCH_NAME
      ) && ( $BUILD_ALL_IN_ONE == "true" || $CI_COMMIT_MESSAGE =~ /\[build-all]/ )
      && $HEROKU_IMAGE_NAME != "disable"
  variables:
    IMAGE_NAME: "$HEROKU_IMAGE_NAME"
    DOCKERFILE_PATH: "$HEROKU_DOCKERFILE_PATH"
    BUILD_FROM_IMAGE: "$TESTED_ALLINONE_CI_IMAGE"
trigger-saas-build:
  stage: publish
  inherit:
    variables:
    - CI_COMMIT_BRANCH
    - TESTED_BACKEND_CI_IMAGE
    - TESTED_WEBFRONTEND_CI_IMAGE
    - CI_COMMIT_SHA
    - CI_COMMIT_SHORT_SHA
    - DEVELOP_BRANCH_NAME
    - MASTER_BRANCH_NAME
    - CI_IMAGE_REPO
    - BACKEND_IMAGE_NAME
    - WEBFRONTEND_IMAGE_NAME
    - TESTED_IMAGE_PREFIX
  variables:
    UPSTREAM_SHA: "$CI_COMMIT_SHA"
    UPSTREAM_SHORT_SHA: "$CI_COMMIT_SHORT_SHA"
  rules:
  - if: $CI_PROJECT_ID == "10858056" && $CI_COMMIT_BRANCH == $DEVELOP_BRANCH_NAME
  allow_failure: true
  trigger:
    project: baserow/baserow-saas
    branch: "$CI_COMMIT_BRANCH"
publish-backend-develop-latest-image:
  extends: ".publish-baserow-image"
  only:
    variables:
    - "$CI_COMMIT_BRANCH == $DEVELOP_BRANCH_NAME"
  variables:
    SKIP_IF_NOT_LATEST_COMMIT_ON_BRANCH: "$DEVELOP_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_BACKEND_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$BACKEND_IMAGE_NAME:$DEVELOP_LATEST_TAG"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-backend-release-tagged-image:
  extends: ".publish-baserow-image"
  only:
    refs:
    - tags
  dependencies: []
  variables:
    SKIP_IF_TAG_NOT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_BACKEND_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$BACKEND_IMAGE_NAME:$CI_COMMIT_TAG"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-backend-latest-release-image:
  extends: ".publish-baserow-image"
  only:
    refs:
    - tags
    variables:
    - "$CI_COMMIT_TAG =~ /^[0-9.]+$/"
  dependencies: []
  variables:
    SKIP_IF_NOT_LATEST_COMMIT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SKIP_IF_TAG_NOT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_BACKEND_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$BACKEND_IMAGE_NAME:latest"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-webfrontend-develop-latest-image:
  extends: ".publish-baserow-image"
  only:
    variables:
    - "$CI_COMMIT_BRANCH == $DEVELOP_BRANCH_NAME"
  dependencies: []
  variables:
    SKIP_IF_NOT_LATEST_COMMIT_ON_BRANCH: "$DEVELOP_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_WEBFRONTEND_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$WEBFRONTEND_IMAGE_NAME:$DEVELOP_LATEST_TAG"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-webfrontend-release-tagged-image:
  extends: ".publish-baserow-image"
  only:
    refs:
    - tags
  dependencies: []
  variables:
    SKIP_IF_TAG_NOT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_WEBFRONTEND_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$WEBFRONTEND_IMAGE_NAME:$CI_COMMIT_TAG"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-webfrontend-latest-release-image:
  extends: ".publish-baserow-image"
  only:
    refs:
    - tags
    variables:
    - "$CI_COMMIT_TAG =~ /^[0-9.]+$/"
  dependencies: []
  variables:
    SKIP_IF_NOT_LATEST_COMMIT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SKIP_IF_TAG_NOT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_WEBFRONTEND_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$WEBFRONTEND_IMAGE_NAME:latest"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-allinone-develop-latest-image:
  extends: ".publish-baserow-image"
  only:
    variables:
    - "$CI_COMMIT_BRANCH == $DEVELOP_BRANCH_NAME"
  dependencies: []
  variables:
    SKIP_IF_NOT_LATEST_COMMIT_ON_BRANCH: "$DEVELOP_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_ALLINONE_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$ALLINONE_IMAGE_NAME:$DEVELOP_LATEST_TAG"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-allinone-release-tagged-image:
  extends: ".publish-baserow-image"
  only:
    refs:
    - tags
  dependencies: []
  variables:
    SKIP_IF_TAG_NOT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_ALLINONE_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$ALLINONE_IMAGE_NAME:$CI_COMMIT_TAG"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-allinone-latest-release-image:
  extends: ".publish-baserow-image"
  only:
    refs:
    - tags
    variables:
    - "$CI_COMMIT_TAG =~ /^[0-9.]+$/"
  dependencies: []
  variables:
    SKIP_IF_NOT_LATEST_COMMIT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SKIP_IF_TAG_NOT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_ALLINONE_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$ALLINONE_IMAGE_NAME:latest"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-cloudron-develop-latest-image:
  extends: ".publish-baserow-image"
  only:
    variables:
    - $CLOUDRON_IMAGE_NAME != "disable" && $CI_COMMIT_BRANCH == $DEVELOP_BRANCH_NAME
  dependencies: []
  variables:
    SKIP_IF_NOT_LATEST_COMMIT_ON_BRANCH: "$DEVELOP_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_CLOUDRON_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$CLOUDRON_IMAGE_NAME:$DEVELOP_LATEST_TAG"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
publish-cloudron-release-tagged-image:
  extends: ".publish-baserow-image"
  only:
    variables:
    - $CLOUDRON_IMAGE_NAME != "disable"
    refs:
    - tags
  dependencies: []
  variables:
    SKIP_IF_TAG_NOT_ON_BRANCH: "$MASTER_BRANCH_NAME"
    SOURCE_IMAGE: "$TESTED_CLOUDRON_CI_IMAGE"
    TARGET_IMAGE: "$RELEASE_IMAGE_REPO/$CLOUDRON_IMAGE_NAME:$CI_COMMIT_TAG"
    TARGET_REGISTRY: "$RELEASE_REGISTRY"
    TARGET_REGISTRY_PASSWORD: "$RELEASE_REGISTRY_PASSWORD"
    TARGET_REGISTRY_USER: "$RELEASE_REGISTRY_USER"
docker-file-hadolint:
  extends:
  - ".docker-image-test-stage"
  - ".skippable-job"
  dependencies: []
  variables:
    RUN_WHEN_CHANGES_MADE_IN: Dockerfile
  script:
  - mkdir -p reports
  - |
    docker run --rm -i -v "$(pwd)":/opt/hadolint/. -w /opt/hadolint \
      hadolint/hadolint:2.9.3-debian \
      hadolint --ignore DL3008 -f gitlab_codeclimate \
      backend/Dockerfile \
      web-frontend/Dockerfile \
      heroku.Dockerfile \
      e2e-tests/Dockerfile \
      deploy/*/Dockerfile > reports/hadolint.json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
      - reports/*
    paths:
    - reports/*
mjml-compiled-check:
  extends:
  - ".docker-image-test-stage"
  - ".skippable-job"
  variables:
    RUN_WHEN_CHANGES_MADE_IN: ".eta"
  dependencies: []
  script:
  - cd backend/email_compiler
  - yarn install
  - yarn run compile
  - |
    git diff --exit-code || \
      (echo "Uncompiled changes found to mjml email templates, run the compiler in backend/email_compiler/ and committed the changes" && exit 1)
